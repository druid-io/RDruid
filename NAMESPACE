# Generated by roxygen2 (4.1.1): do not edit by hand

S3method("!",druid.filter)
S3method("!",druid.having)
S3method("!=",druid.dimension)
S3method("%=%",druid.dimension)
S3method("%~%",druid.dimension)
S3method("&",druid.aggregator)
S3method("&",druid.filter)
S3method("&",druid.having)
S3method("*",druid.postaggregator)
S3method("+",druid.postaggregator)
S3method("-",druid.postaggregator)
S3method("/",druid.postaggregator)
S3method("<=",druid.aggregation)
S3method("==",druid.aggregation)
S3method("==",druid.dimension)
S3method(">=",druid.aggregation)
S3method("|",druid.filter)
S3method("|",druid.having)
S3method(longSum,druid.metric)
S3method(max,druid.metric)
S3method(min,druid.metric)
S3method(print,druid.aggregation)
S3method(print,druid.aggregator)
S3method(print,druid.dimension)
S3method(print,druid.filter)
S3method(print,druid.granularity)
S3method(print,druid.having)
S3method(print,druid.metric)
S3method(print,druid.postaggregator)
S3method(sum,druid.metric)
S3method(sum,druid.postaggregator)
S3method(toISO,Interval)
S3method(toISO,POSIXt)
S3method(toISO,character)
S3method(toISO,list)
S3method(toISO,numeric)
S3method(toString,druid.aggregator)
S3method(toString,druid.filter)
S3method(toString,druid.granularity)
S3method(toString,druid.having)
S3method(toString,druid.postaggregator)
export("%=%")
export("%~%")
export(aggregation)
export(cardinality)
export(dimension)
export(druid.build.aggregation)
export(druid.build.postaggregator)
export(druid.count)
export(druid.filter.and)
export(druid.filter.javascript)
export(druid.filter.or)
export(druid.filter.regex)
export(druid.having.and)
export(druid.having.or)
export(druid.query.dataSources)
export(druid.query.dimensions)
export(druid.query.groupBy)
export(druid.query.metrics)
export(druid.query.segmentMetadata)
export(druid.query.timeBoundary)
export(druid.query.timeseries)
export(druid.query.topN)
export(druid.url)
export(equalTo)
export(field)
export(fromISO)
export(granularity)
export(hyperUnique)
export(javascript)
export(longSum)
export(metric)
export(selector)
export(toISO)
import(jsonlite)
